<!-- Overlay -->
<div class="fixed inset-0 filter_overlay w-full z-50 min-h-full bg-gray-200 bg-opacity-80 hidden" aria-hidden="true"></div>
<!-- Overlay -->

<div class="flex justify-between items-center">
	<!--Breadcrumb-->
	{% if section.settings.breadcrumb %}
		{% render 'breadcrumb' %}	
	{% endif %}
	<!--Breadcrumb-->

	<div class="px-4">
		<button id="filter-grid" class="uppercase flex items-center w-[160px] justify-between" style="border: 1px solid #d5d5d5; padding: 0 15px; font-size: 12px;">
			Filters
			{% render 'icon-filter' %}
		</button>
		{% render 'filters' %}
	</div>

</div>

<section class="px-4 my-5">
	{% if section.settings.show_title_collection %}
		<h1 class="text-center text-4xl my-4 tracking-widest">
			{{ collection.title | upcase }}
		</h1>
	{% endif %}

	{% paginate collection.products by section.settings.number_of_products_per_page %}
		<div class="grid grid-cols-2 gap-4 md:grid-cols-4" id="ProductGridContainer">
			{% for product in collection.products %}
				{% render 'product-card', product: product %}
			{% else %}
				<p>There are no products inside of this collection.</p>
			{% endfor %}
		</div>

		<div class="container mx-auto my-10">
			{% render 'pagination', pagination: paginate %}
		</div>
	{% endpaginate %}
</section>

<script>
	const buttonFilter = document.querySelectorAll('.filter-form input[type="checkbox"]');

	for (let i = 0; i < buttonFilter.length; i++) {
		const element = buttonFilter[i];
		
		element.addEventListener('change', e => {

			const elementChecked = document.querySelectorAll('.filter-form input[type="checkbox"]:checked')
			let selectedOptions = [];

			for (let i = 0; i < elementChecked.length; i++) {
				const element = elementChecked[i];
				const urlFilter = element.getAttribute('name') + '=' + element.getAttribute('value');
				selectedOptions.push(urlFilter);
				console.log(selectedOptions.toString().replace(',','&'))
				fetch('/collections/{{ collection.handle }}?' + selectedOptions.toString().replace(',','&'))
					.then(response => response.text())
					.then(data => {
						let html_div = document.createElement('div');
						html_div.innerHTML = data;
						let html_dom = html_div.querySelector('#ProductGridContainer').innerHTML;
						document.querySelector('#ProductGridContainer').innerHTML = html_dom;
						// update url without refreshing the page 
						history.replaceState(null, null, '?' + selectedOptions.toString().replace(',','&'));
					})
					.catch(error => console.error('Error:', error))
					.finally(() => loading = false);
			}
		})

	}
</script>

<style type="text/css">
{% if section.settings.show_second_image %}
	{% for product in collection.products %}
		{% if product.images.size > 1 %}
		.cardImgWrap--{{ product.id }} .imgOne {
			display: block;
		}
		.cardImgWrap--{{ product.id }}:hover .imgOne {
			display: none;
		}
		.cardImgWrap--{{ product.id }} .imgTwo {
			display: none;
		}
		.cardImgWrap--{{ product.id }}:hover .imgTwo {
			display: block;
		}
		{%  endif %}
	{% endfor %}
{% endif %}
</style>

{% schema %}
{
	"name": "Collection",
	"settings": [
		{
			"type": "checkbox",
			"id": "breadcrumb",
			"label": "Show breadcrumb",
			"default": true
		},
		{
			"type": "number",
			"id": "number_of_products_per_page",
			"default": 6,
			"label": "Number of products per page."
		},
		{
			"type": "checkbox",
			"id": "show_title_collection",
			"label": "Show Title Collection",
			"default": false
		},
		{
			"type": "checkbox",
			"id": "show_vendor",
			"label": "Show Vendor",
			"default": true
		},
		{
			"type": "checkbox",
			"id": "show_second_image",
			"label": "Show Second Image",
			"default": true
		},
		{
			"type": "checkbox",
			"id": "active_zoom_image",
			"label": "Active Zoom Image",
			"default": false,
			"info": "If you active this option Second Image must be desactivated"
		}
	]
}
{% endschema %}
