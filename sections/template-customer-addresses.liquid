<section class="max-w-6xl mx-auto px-4 py-12" x-data="{ new_address: false }">

	<div class="flex flex-col md:flex-row items-center justify-between my-5 gap-4">
		<h1 class="uppercase text-2xl font-bold">Addresses</h1>
		<button @click="new_address = true" type="button" class="text-white font-medium bg-gray-700 hover:bg-gray-900 px-6 py-2 uppercase">Create new address</button>
		<a href="{{ routes.account_url }}" class="text-blue-600 hover:text-blue-800 font-medium underline uppercase">Back to account</a>
	</div>

	<div class="h-full w-full fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto z-50" 
		x-show="new_address"
	>
		<div class="relative max-w-md mx-auto bg-white border top-20 p-4" @click.away="new_address = false">
			<div class="flex items-center justify-between mb-4">
				<h2 class="text-lg font-medium uppercase">New Address</h2>
				<button class="text-gray-500 uppercase" @click="new_address = false">{% render 'icon-close' %}</button>
			</div>

			{% render 'newaddress-form' %}
		</div>
	</div>

	<div>
		{% paginate customer.addresses by 10 %}
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-12 p-4 md:p-12">
			{% for address in customer.addresses %}
				<div x-data="{ address_{{ address.id }}: false }">
					<div class="relative flex flex-col text-center border p-2">
						{% if address == customer.default_address %}
							<span class="text-xs font-medium text-white bg-black px-4 py-2 uppercase">Default</span>
						{% endif %}

						<div class="my-8 h-full">
							{{ address | format_address | upcase }}
						</div>

						<div class="flex flex-row gap-2">
							<button class="uppercase w-full text-white bg-gray-700 hover:bg-gray-900 font-medium py-2" @click="address_{{ address.id }} = true">Edit</button>
							<button class="uppercase w-full text-gray-700 border font-medium py-2" data-delete-address>Delete</button>
						</div>
					</div>

					<div class="h-full w-full fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto z-50" x-show="address_{{ address.id }}">
						<div class="relative max-w-md mx-auto bg-white border top-20 p-4" @click.away="address_{{ address.id }} = false">
							<div class="flex items-center justify-between mb-4">
								<h2 class="text-lg font-medium uppercase">Edit Address</h2>
								<button class="text-gray-500 uppercase" @click="address_{{ address.id }} = false">{% render 'icon-close' %}</button>
							</div>

							{% render 'editaddress-form', address: address %}
						</div>
					</div>
				</div>
			{% endfor %}
		</div>
		{% endpaginate %}
	</div>

</section>

<script>
	class CustomerAddress {
		constructor() {
			this.initCustomerAddress();
			this.customerAddressesSelector();
		}

		initCustomerAddress() {
			const allAddressesSelector = document.querySelectorAll("select[data-country-selector]");
			if(allAddressesSelector.length < 1) return;

			allAddressesSelector.forEach(select => {
				let selectedCountry = this.getSelectedCountry(select);

				if(!selectedCountry) return;

				let provinces = selectedCountry.dataset.provinces;
				let arrayOfProvince = JSON.parse(provinces);

				let provinceSelector = document.querySelector(`#address_province_${select.dataset.id}`)

				if(arrayOfProvince.length < 1) {
					provinceSelector.setAttribute('disabled', 'disabled');
				} else {
					provinceSelector.removeAttribute('disabled');
				}

				provinceSelector.innerHTML = '';
				let options = '';
				for (let index = 0; index < arrayOfProvince.length; index++) {
					if(arrayOfProvince[index][0] === provinceSelector.getAttribute('value')) {
						options += `<option value="${arrayOfProvince[index][0]}" selected>${arrayOfProvince[index][0]}</option>`;
					}else{
						options += `<option value="${arrayOfProvince[index][0]}">${arrayOfProvince[index][0]}</option>`;
					}
				}
				provinceSelector.innerHTML = options;
			})
		}
		getSelectedCountry(select) {
			let option, selectedOption;
			for (let index = 0; index < select.options.length; index++) {
				option = select.options[index];

				if(option.value === select.getAttribute('value')) {
					selectedOption = option;
					selectedOption.setAttribute('selected', 'selected')
					break;
				}
			}
			return selectedOption;
		}	
		customerAddressesSelector() {
			const addressesSelector = document.querySelectorAll('select[data-country-selector]');
			if(addressesSelector.length < 1) return;

			addressesSelector.forEach(select => {
				select.addEventListener('change', function(e){
					let provinces = this.options[this.selectedIndex].dataset.provinces;
					let arrayOfProvince = JSON.parse(provinces);

					let provinceSelector = document.querySelector(`#address_province_${this.dataset.id}`);

					if(arrayOfProvince.length < 1){
						provinceSelector.setAttribute('disabled', 'disabled');
					}else{
						provinceSelector.removeAttribute('disabled');
					}

					provinceSelector.innerHTML = '';
					let options = '';
					for (let index = 0; index < arrayOfProvince.length; index++) {
						options += `<option value="${arrayOfProvince[index][0]}">${arrayOfProvince[index][0]}</option>`;	
					}

					provinceSelector.innerHTML = options;
				});
			});

		}
	}

	const customerAddress = new CustomerAddress();
</script>